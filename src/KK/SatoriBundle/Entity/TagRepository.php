<?php

namespace KK\SatoriBundle\Entity;

use Doctrine\ORM\EntityRepository;
use RecursiveArrayIterator;
use RecursiveIteratorIterator;
use KK\SatoriBundle\Entity\Blog;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends EntityRepository
{
    public function getTags()
    {
        $tags = $this->createQueryBuilder('t')
            ->select('t.tag')
            ->getQuery()
            ->getResult();

        return $tags;
    }

    public function getBlogs()
    {
        $blogs = $this->createQueryBuilder('b')
            ->select('b.tags')
            ->getQuery()
            ->getResult();

        return $blogs;
    }

    public function getTagWeights($blogs)
    {
        $tagWeights = array();

        // Flatten multi-dimensional array into a single array
//        $recur_multi_dimen_arr_obj =  new RecursiveArrayIterator($tags);
//        $recur_flat_arr_obj =  new RecursiveIteratorIterator($recur_multi_dimen_arr_obj);
//        $flat_arr = iterator_to_array($recur_flat_arr_obj, false);
//        var_dump($flat_arr); die();

        if (empty($blogs))
            return $tagWeights;

        foreach ($blogs as $blog) {

            foreach ($blog->getTags() as $tag) { // Iterates through all tags, if a tag is set/used more than once then a +1 is added
                $tagWeights[$tag->getTag()] = (isset($tagWeights[$tag->getTag()])) ? $tagWeights[$tag->getTag()] + 1 : 1;
            }
        }

        // Shuffle the tags
        uksort($tagWeights, function() {
            return rand() > rand();
        });

        $max = max($tagWeights);

        // Max of 5 weights
        $multiplier = ($max > 5) ? 5 / $max : 1;

        foreach ($tagWeights as &$tag) {
            $tag = ceil($tag * $multiplier);
        }

        return $tagWeights;

    }

}
